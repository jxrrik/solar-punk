

=== public\index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>



=== README.md ===
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)



=== root.js ===
const fs = require("fs");
const path = require("path");

const projectStructure = {
  src: {
    components: {
      "Game.js": `
import React from "react";
import Player from "./Player";
import Tile from "./Tile";
import HUD from "./HUD";
import "./Game.css";

const Game = () => {
  return (
    <div className="game">
      <HUD />
      <div className="map">
        {[...Array(15)].map((_, row) =>
          [...Array(20)].map((_, col) => <Tile key={\`\${row}-\${col}\`} x={col} y={row} />)
        )}
        <Player />
      </div>
    </div>
  );
};

export default Game;
`,
      "Player.js": `
import React, { useState, useEffect } from "react";
import { TILE_SIZE } from "../constants/GameConfig";
import { handleInput } from "../systems/InputSystem";
import { movePlayer } from "../systems/MovementSystem";

const Player = () => {
  const [position, setPosition] = useState({ x: 10 * TILE_SIZE, y: 7 * TILE_SIZE });

  useEffect(() => {
    const onKeyDown = (event) => {
      setPosition((prev) => movePlayer(prev, handleInput(event)));
    };
    window.addEventListener("keydown", onKeyDown);
    return () => window.removeEventListener("keydown", onKeyDown);
  }, []);

  return (
    <div
      style={{
        position: "absolute",
        left: position.x,
        top: position.y,
        width: TILE_SIZE,
        height: TILE_SIZE,
        backgroundColor: "black",
      }}
    />
  );
};

export default Player;
`,
      "Tile.js": `
import React from "react";
import { TILE_SIZE } from "../constants/GameConfig";

const Tile = ({ x, y }) => {
  return (
    <div
      style={{
        position: "absolute",
        left: x * TILE_SIZE,
        top: y * TILE_SIZE,
        width: TILE_SIZE,
        height: TILE_SIZE,
        backgroundColor: x % 2 === y % 2 ? "green" : "darkgreen",
      }}
    />
  );
};

export default Tile;
`,
      "HUD.js": `
import React from "react";

const HUD = () => {
  return (
    <div style={{ position: "absolute", top: 0, left: 0, color: "white", padding: 10 }}>
      <h1>Farm RPG Simulator</h1>
      <p>Gold: 100 | Crops: 5</p>
    </div>
  );
};

export default HUD;
`,
    },
    systems: {
      "InputSystem.js": `
export const handleInput = (event) => {
  switch (event.key.toLowerCase()) {
    case "w":
      return { dx: 0, dy: -1 };
    case "a":
      return { dx: -1, dy: 0 };
    case "s":
      return { dx: 0, dy: 1 };
    case "d":
      return { dx: 1, dy: 0 };
    default:
      return { dx: 0, dy: 0 };
  }
};
`,
      "MovementSystem.js": `
import { TILE_SIZE, MAP_WIDTH, MAP_HEIGHT } from "../constants/GameConfig";

export const movePlayer = (position, { dx, dy }) => {
  const newX = Math.max(0, Math.min(position.x + dx * TILE_SIZE, (MAP_WIDTH - 1) * TILE_SIZE));
  const newY = Math.max(0, Math.min(position.y + dy * TILE_SIZE, (MAP_HEIGHT - 1) * TILE_SIZE));
  return { x: newX, y: newY };
};
`,
    },
    constants: {
      "GameConfig.js": `
export const TILE_SIZE = 50;
export const MAP_WIDTH = 20; // 20 tiles
export const MAP_HEIGHT = 15; // 15 tiles
`,
    },
    styles: {
      "Game.css": `
body, html {
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

.game {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

.map {
  position: relative;
  width: 100%;
  height: 100%;
}
`,
    },
  },
};

function createFiles(basePath, structure) {
  for (const [key, value] of Object.entries(structure)) {
    const currentPath = path.join(basePath, key);
    if (typeof value === "string") {
      fs.writeFileSync(currentPath, value.trim());
      console.log(`File created: ${currentPath}`);
    } else {
      fs.mkdirSync(currentPath, { recursive: true });
      console.log(`Directory created: ${currentPath}`);
      createFiles(currentPath, value);
    }
  }
}

const baseDir = path.join(__dirname, "src");
createFiles(baseDir, projectStructure);



=== src\App.js ===
import React from "react";
import Game from "./components/Game";

function App() {
  return (
    <div className="App">
      <Game />
    </div>
  );
}

export default App;



=== src\components\Debug.js ===
import React from "react";

const Debug = ({ position, velocity, animationState }) => {
  return (
    <div
      style={{
        position: "absolute",
        bottom: 10,
        left: 10,
        padding: "10px",
        backgroundColor: "rgba(0, 0, 0, 0.7)",
        color: "white",
        borderRadius: "5px",
        fontFamily: "Arial, sans-serif",
        fontSize: "14px",
      }}
    >
      <div><strong>Position:</strong> {`(${Math.round(position.x)}, ${Math.round(position.y)})`}</div>
      <div><strong>Velocity:</strong> {`dx: ${velocity.dx.toFixed(2)}, dy: ${velocity.dy.toFixed(2)}`}</div>
      <div><strong>Animation:</strong> {animationState}</div>
    </div>
  );
};

export default Debug;



=== src\components\Game.css ===
/* Garantir que o body e o html ocupem 100% da tela */
body, html {
  margin: 0;
  padding: 0;
  overflow: hidden;
  height: 100%;
  background-color: #333;
}

/* O contêiner do jogo ocupa 100% da tela */
.game {
  position: relative;
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: green; /* Fundo do jogo */
}

/* O mapa ocupa 100% do contêiner do jogo */
.map {
  position: relative;
  width: 100%;
  height: 100%;
}



=== src\components\Game.js ===
import React from "react";
import Player from "./Player";
import Tile from "./Tile";
import HUD from "./HUD";
import { MAP_WIDTH, MAP_HEIGHT } from "../constants/GameConfig";
import "./Game.css";

const Game = () => {
  return (
    <div className="game">
      <HUD />
      <div className="map">
        {[...Array(MAP_HEIGHT)].map((_, row) =>
          [...Array(MAP_WIDTH)].map((_, col) => <Tile key={`${row}-${col}`} x={col} y={row} />)
        )}
        <Player />
      </div>
    </div>
  );
};

export default Game;



=== src\components\HUD.js ===
import React from "react";

const HUD = () => {
  return (
    <div style={{ position: "absolute", top: 0, left: 0, color: "white", padding: 10 }}>
      <h1>Farm RPG Simulator</h1>
      <p>Gold: 100 | Crops: 5</p>
    </div>
  );
};

export default HUD;



=== src\components\Player.js ===
import React, { useState, useEffect } from "react";
import { TILE_SIZE } from "../constants/GameConfig";
import SpriteSystem from "../systems/SpriteSystem";
import Debug from "./Debug";

const Player = () => {
  const [position, setPosition] = useState({
    x: Math.floor(window.innerWidth / 2) - TILE_SIZE / 2,
    y: Math.floor(window.innerHeight / 2) - TILE_SIZE / 2,
  });

  const [velocity, setVelocity] = useState({ dx: 0, dy: 0 });
  const [keysPressed, setKeysPressed] = useState({});
  const [currentFrame, setCurrentFrame] = useState(0);
  const [animationState, setAnimationState] = useState("idle"); // "idle" or "run"
  const acceleration = 0.3;
  const maxSpeed = 5;
  const friction = 0.05;
  const frameRate = 100; // Tempo entre frames em milissegundos
  const totalFrames = { idle: 6, run: 6 }; // Número de frames por animação

  const handleKeyDown = (event) => {
    setKeysPressed((prev) => ({ ...prev, [event.key.toLowerCase()]: true }));
  };

  const handleKeyUp = (event) => {
    setKeysPressed((prev) => ({ ...prev, [event.key.toLowerCase()]: false }));
  };

  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      let dx = velocity.dx;
      let dy = velocity.dy;

      if (keysPressed.w) dy -= acceleration;
      if (keysPressed.s) dy += acceleration;
      if (keysPressed.a) dx -= acceleration;
      if (keysPressed.d) dx += acceleration;

      dx = Math.max(-maxSpeed, Math.min(maxSpeed, dx));
      dy = Math.max(-maxSpeed, Math.min(maxSpeed, dy));

      if (!keysPressed.w && !keysPressed.s) dy *= 1 - friction;
      if (!keysPressed.a && !keysPressed.d) dx *= 1 - friction;

      setPosition((prev) => ({
        x: Math.max(0, Math.min(prev.x + dx, window.innerWidth - TILE_SIZE)),
        y: Math.max(0, Math.min(prev.y + dy, window.innerHeight - TILE_SIZE)),
      }));

      setAnimationState(dx !== 0 || dy !== 0 ? "run" : "idle");
      setVelocity({ dx, dy });
    }, 16);

    return () => clearInterval(interval);
  }, [velocity, keysPressed]);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentFrame((prev) => (prev + 1) % totalFrames[animationState]);
    }, frameRate);

    return () => clearInterval(interval);
  }, [animationState]);

  const spriteStyle = SpriteSystem.getSpriteFrame(
    animationState,
    currentFrame,
    TILE_SIZE,
    totalFrames
  );

  return (
    <>
      <div
        style={{
          position: "absolute",
          left: position.x,
          top: position.y,
          transform: "translate(-50%, -50%)", // Centraliza o sprite
          backgroundImage: `url('/sprites/player.png')`,
          ...spriteStyle,
          backgroundRepeat: "no-repeat",
          border: "1px solid red",
        }}
      />
      <Debug position={position} velocity={velocity} animationState={animationState} />
    </>
  );
};

export default Player;



=== src\components\Tile.js ===
import React from "react";
import { TILE_SIZE } from "../constants/GameConfig";

const Tile = ({ x, y }) => {
  return (
    <div
      style={{
        position: "absolute",
        left: x * TILE_SIZE,
        top: y * TILE_SIZE,
        width: TILE_SIZE,
        height: TILE_SIZE,
        backgroundColor: "green", // Cor sólida para o mapa
      }}
    />
  );
};

export default Tile;



=== src\constants\GameConfig.js ===
export const TILE_SIZE = 128;
export const MAP_WIDTH = Math.ceil(window.innerWidth / TILE_SIZE); // Calcula largura do mapa
export const MAP_HEIGHT = Math.ceil(window.innerHeight / TILE_SIZE); // Calcula altura do mapa



=== src\index.js ===
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./styles/Game.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



=== src\styles\Game.css ===
body, html {
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

.game {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

.map {
  position: relative;
  width: 100%;
  height: 100%;
}


=== src\systems\InputSystem.js ===
export const handleInput = (event) => {
  switch (event.key.toLowerCase()) {
    case "w":
      return { dx: 0, dy: -1 };
    case "a":
      return { dx: -1, dy: 0 };
    case "s":
      return { dx: 0, dy: 1 };
    case "d":
      return { dx: 1, dy: 0 };
    default:
      return { dx: 0, dy: 0 };
  }
};


=== src\systems\MovementSystem.js ===
import { TILE_SIZE, MAP_WIDTH, MAP_HEIGHT } from "../constants/GameConfig";

export const movePlayer = (position, { dx, dy }) => {
  const newX = Math.max(
    0,
    Math.min(position.x + dx * TILE_SIZE, (MAP_WIDTH - 1) * TILE_SIZE)
  );
  const newY = Math.max(
    0,
    Math.min(position.y + dy * TILE_SIZE, (MAP_HEIGHT - 1) * TILE_SIZE)
  );
  return { x: newX, y: newY };
};



=== src\systems\SpriteSystem.js ===
const SpriteSystem = {
    /**
     * Retorna os estilos corretos para a sprite.
     * Garante o alinhamento central da animação.
     */
    getSpriteFrame: (animationState, currentFrame, tileSize, totalFrames) => {
      // Ajustes para centralizar e evitar cortes
      const manualOffsetX = 64; // Ajuste horizontal (em pixels) se necessário
      const manualOffsetY = -32; // Ajuste vertical (em pixels) para corrigir cortes
  
      const yOffset = animationState === "idle" ? 0 : tileSize; // Posição vertical da linha
      const xOffset = currentFrame * tileSize; // Posição horizontal do frame
  
      return {
        backgroundPosition: `-${xOffset + manualOffsetX}px -${yOffset + manualOffsetY}px`,
        backgroundSize: `${tileSize * totalFrames[animationState]}px auto`,
        width: `${tileSize}px`,
        height: `${tileSize}px`,
      };
    },
  };
  
  export default SpriteSystem;
  


=== writer.js ===
const fs = require("fs").promises;
const path = require("path");

// Função para verificar se um diretório ou arquivo deve ser excluído
function shouldExclude(fileOrDir, excludedNames) {
  return excludedNames.some((excluded) => fileOrDir.includes(excluded));
}

// Função para verificar se o conteúdo do arquivo contém uma palavra específica
async function containsWord(filePath, word) {
  const fileContent = await fs.readFile(filePath, "utf-8");
  return fileContent.includes(word);
}

// Função para obter todos os arquivos, aplicando filtros de exclusão
async function getAllFiles(
  dirPath,
  arrayOfFiles = [],
  excludedNames = [],
  wordFilter = null
) {
  const files = await fs.readdir(dirPath);

  for (const file of files) {
    if (shouldExclude(file, excludedNames)) continue;

    const filePath = path.join(dirPath, file);
    const stat = await fs.stat(filePath);

    if (stat.isDirectory()) {
      await getAllFiles(filePath, arrayOfFiles, excludedNames, wordFilter);
    } else {
      if (!wordFilter || (await containsWord(filePath, wordFilter))) {
        arrayOfFiles.push(filePath);
      }
    }
  }

  return arrayOfFiles;
}

// Função para gerar o arquivo de saída
async function generateOutputFile(
  dirPath,
  outputFilePath,
  excludedNames = [],
  wordFilter = null
) {
  try {
    const files = await getAllFiles(dirPath, [], excludedNames, wordFilter);
    const outputStream = await fs.open(outputFilePath, "w");

    for (const file of files) {
      const relativePath = path.relative(dirPath, file);
      const fileContent = await fs.readFile(file, "utf-8");

      await outputStream.write(`\n\n=== ${relativePath} ===\n`);
      await outputStream.write(`${fileContent}\n`);
    }

    await outputStream.close();
    console.log(`Arquivo de saída gerado com sucesso em: ${outputFilePath}`);
  } catch (error) {
    console.error(`Erro ao gerar o arquivo de saída: ${error.message}`);
  }
}

// Configurações

const taskPath = path.join(__dirname);

const taskFilePath = path.join(__dirname, path.basename(taskPath) + ".txt");
const excludedNames = [
  "output",
  "package",
  "test",
  "node_modules",
  "logs",
  "json",
  "txt",
  "ico",
  "jpg",
  "csv",
  "xlsx",
  "pdf",
  "xml",
  "png",
  "zip",
  "log",
  "SERVER_FILES",
  "hooks",
  "imgs",
  ".vscode",
  ".git",
  "certs",	
  "utils"
];
const wordFilter = null; // Substitua por sua palavra específica

generateOutputFile(taskPath, taskFilePath, excludedNames);

